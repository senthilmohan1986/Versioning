<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:oxm="http://www.springframework.org/schema/oxm"
	xmlns:encryption="http://www.jasypt.org/schema/encryption"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:cache="http://www.springframework.org/schema/cache"
	

	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
		http://www.springframework.org/schema/oxm http://www.springframework.org/schema/oxm/spring-oxm-3.0.xsd
		http://www.jasypt.org/schema/encryption http://www.jasypt.org/schema/encryption/jasypt-spring31-encryption-1.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd
		http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->

	<mvc:annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<mvc:resources mapping="/resources/**" location="/resources/" />
	<mvc:resources mapping="/html/**" location="/html/" />
	
	<bean
		class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">
		<property name="order" value="2" />
	</bean>

	<bean id="jsonConverter"
		class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
		<property name="supportedMediaTypes" value="application/json" />
	</bean>

	<bean id="byteArrayMessageConverter" class="org.springframework.http.converter.ByteArrayHttpMessageConverter"/>
	<bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<property name="order" value="1" />
		<property name="ignoreAcceptHeader" value="true" />
		<property name="defaultContentType" value="application/json" />
		<property name="mediaTypes">
			<map>
				<entry key="xml" value="application/xml" />
				<entry key="json" value="application/json" />
				<entry key="jsonp" value="application/javascript" />
				<entry key="png" value="image/png" />
			</map>
		</property>
		<property name="defaultViews">
			<list>
				<bean
					class="org.springframework.web.servlet.view.json.MappingJacksonJsonView">
				</bean>
			</list>
		</property>
	</bean>

 	 
	<!-- DB Content-->
	<bean class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close" id="datasource-social-content">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="jdbc:mysql://localhost:3306/xborder_Social_Data" />
		<property name="username" value="root" />
		<property name="password" value="" />
		<property name="testOnBorrow" value="true" />
		<property name="testOnReturn" value="true" />
		<property name="testWhileIdle" value="true" />
		<property name="timeBetweenEvictionRunsMillis"
			value="1800000" />
		<property name="numTestsPerEvictionRun" value="3" />
		<property name="minEvictableIdleTimeMillis"
			value="1800000" />
	</bean>
	<bean class="org.springframework.orm.jpa.JpaTransactionManager"
		id="transactionManager_content">
		<property name="entityManagerFactory" ref="entityManagerFactory_social_data" />
		<qualifier value="social-data"/>
	</bean>
		
		 		
	<bean class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"
		id="entityManagerFactory_social_data">
		<property name="packagesToScan" value="com.tt.social" />
		<property name="dataSource" ref="datasource-social-content" />
		<property name="jpaVendorAdapter">
			<bean
				class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<property name="databasePlatform"
					value="org.hibernate.dialect.SQLServerDialect" />
				<property name="generateDdl" value="false" />
				<property name="showSql" value="true" />
			</bean>
		</property>
	</bean>


	<context:component-scan base-package="com.tt.social.twitter.collector.executor" />
		
	<!-- <util:properties id="prodConfig" location="classpath:META-INF/spring/app_prod.properties"/> -->
	
	<!-- <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSourceSocial" />
	</bean> -->
		
	<!-- start schedular -->
	
	<bean id="twitterDataDao" class="com.tt.social.twitter.collector.dao.impl.TwitterDataDaoImpl">
	</bean>
	
	<bean id="locationDetailsDao" class="com.tt.social.twitter.collector.dao.impl.XborderLocationDetailsDaoImpl">
	</bean>
	
	<bean id="userDetailsDao" class="com.tt.social.twitter.collector.dao.impl.TwitterUserDetailsDaoImpl">
	</bean>
	
	
	
	<bean id="twitterCollectorStream" class="com.tt.social.twitter.collector.executor.TwitterCollectorStream">
		<constructor-arg>
       <ref bean="locationDetailsDao"/>
    </constructor-arg>
	</bean>
	
</beans>

